package com.Game.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 * Utility class for generating random game scenarios in Single Game Mode.
 * Provides methods to create diverse and interesting game configurations.
 */
public class SingleGameScenarioGenerator {
    
    /**
     * Random number generator for scenario creation.
     */
    private static final Random RANDOM = new Random();
    
    /**
     * List of available maps for random selection.
     */
    private static final List<String> AVAILABLE_MAPS = Arrays.asList(
        "canada.map",
        "swiss.map", 
        "MiddleEast-Qatar.map"
    );
    
    /**
     * List of available player strategies.
     */
    private static final List<String> AVAILABLE_STRATEGIES = Arrays.asList(
        "human", 
        "aggressive", 
        "benevolent", 
        "random", 
        "cheater"
    );
    
    /**
     * Generates a completely random game scenario.
     * 
     * @return A list containing map file, max turns, and player strategies
     */
    public static List<Object> generateRandomScenario() {
        List<Object> scenario = new ArrayList<>();
        
        // Randomly select map
        String mapFile = getRandomMap();
        scenario.add(mapFile);
        
        // Randomly determine max turns
        int maxTurns = getRandomMaxTurns();
        scenario.add(maxTurns);
        
        // Randomly generate player strategies
        List<String> playerStrategies = generateRandomPlayerStrategies();
        scenario.add(playerStrategies);
        
        return scenario;
    }
    
    /**
     * Generates a balanced game scenario.
     * 
     * @return A list containing map file, max turns, and player strategies
     */
    public static List<Object> generateBalancedScenario() {
        List<Object> scenario = new ArrayList<>();
        
        // Select a balanced map
        String mapFile = "canada.map";
        scenario.add(mapFile);
        
        // Standard max turns
        int maxTurns = 30;
        scenario.add(maxTurns);
        
        // Create a balanced strategy mix
        List<String> balancedStrategies = Arrays.asList(
            "human", 
            "aggressive", 
            "benevolent", 
            "random"
        );
        scenario.add(balancedStrategies);
        
        return scenario;
    }
    
    /**
     * Generates a challenging game scenario.
     * 
     * @return A list containing map file, max turns, and player strategies
     */
    public static List<Object> generateChallengingScenario() {
        List<Object> scenario = new ArrayList<>();
        
        // Select a complex map
        String mapFile = "MiddleEast-Qatar.map";
        scenario.add(mapFile);
        
        // Shorter max turns to increase challenge
        int maxTurns = 20;
        scenario.add(maxTurns);
        
        // Create a challenging strategy mix
        List<String> challengingStrategies = Arrays.asList(
            "aggressive", 
            "aggressive", 
            "cheater", 
            "random"
        );
        scenario.add(challengingStrategies);
        
        return scenario;
    }
    
    /**
     * Randomly selects a map file.
     * 
     * @return A randomly selected map file name
     */
    private static String getRandomMap() {
        return AVAILABLE_MAPS.get(RANDOM.nextInt(AVAILABLE_MAPS.size()));
    }
    
    /**
     * Generates a random number of maximum turns.
     * 
     * @return A random number of turns between 10 and 50
     */
    private static int getRandomMaxTurns() {
        return 10 + RANDOM.nextInt(41); // 10-50 turns
    }
    
    /**
     * Generates a random set of player strategies.
     * 
     * @return A list of randomly selected player strategies
     */
    private static List<String> generateRandomPlayerStrategies() {
        // Ensure at least 2 players, maximum 5
        int playerCount = 2 + RANDOM.nextInt(4);
        
        List<String> strategies = new ArrayList<>();
        for (int i = 0; i < playerCount; i++) {
            strategies.add(
                AVAILABLE_STRATEGIES.get(RANDOM.nextInt(AVAILABLE_STRATEGIES.size()))
            );
        }
        
        return strategies;
    }
    
    /**
     * Provides a description of the generated scenario.
     * 
     * @param scenario The scenario generated by one of the generation methods
     * @return A human-readable description of the scenario
     */
    public static String describeScenario(List<Object> scenario) {
        if (scenario.size() != 3) {
            return "Invalid scenario configuration";
        }
        
        String mapFile = (String) scenario.get(0);
        int maxTurns = (int) scenario.get(1);
        @SuppressWarnings("unchecked")
        List<String> playerStrategies = (List<String>) scenario.get(2);
        
        StringBuilder description = new StringBuilder();
        description.append("Game Scenario:\n");
        description.append("- Map: ").append(mapFile).append("\n");
        description.append("- Maximum Turns: ").append(maxTurns).append("\n");
        description.append("- Players: ").append(playerStrategies.size()).append("\n");
        description.append("- Player Strategies: ");
        
        for (int i = 0; i < playerStrategies.size(); i++) {
            description.append("Player ").append(i+1).append(" (")
                       .append(playerStrategies.get(i)).append(") ");
        }
        
        return description.toString();
    }
}